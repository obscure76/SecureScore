OpenFlow(a switching technology) is getting popular day by day. OpenFlow Protocol has caught the interest of Network device manufacturers, vendors and administrators. This is because of its flexible nature in supporting different innovative protocols without getting to know the details implementation of the manufacturer code. Software-Defined Networking (SDN), a network that can be configured and managed from a centralized point called controller and used the OpenFlow technology to communicate between the controller and the network device. SDN has provided a new paradigm for providing flexibility and programmability to conventional
Networking. With shift of control plane from distributed to centralized design, the entire network is prone to attack at a single point of network. In addition to external attacks on the centralized Controller, there are some attacks that can be induced by malicious hosts lying inside the network. As part of our work, we explored some new attacks on the SDN like ARP (Address Resolution Protocol) broadcast flooding , ping packet with heavy payload , UDP packets with heavy payload and DDoS attacks (Amplification exploiting NTP, DNS servers) targeting any host or link connected to the target host. In order to make the defense adaptive in nature irrespective of protocol, we have used machine learning algorithms and statistics models to fit the data in the best possible way . Our results show that we are able to prevent the most of the attacks using the machine learning technique in the SDN to protect the targeted host.

Intro:
SDN or software defined network changes the computer network architecture by decoupling the data plane from the control plane. Data plane involves in the forwarding of packet to a particular/all interface and control plane acts as the decision maker or brain of the system. SDN provides a greater control of the operation of the network by allowing central and programmable control of the switches connected in the network. Controller has the flexibility in programming the network. This eventually opens up some security concerns as attackers now able to exploit the flexibility feature of the controller to attack the network. As controller is the single point of contact for the underlying network, any error at the controller or controller operation mode will be broadcasted to the entire network. Therefore it is crucial to secure the
overall functionality of the controller so that it can’t be exploited by attackers to target the network underneath. Similarly as controller is the central point in the network, it is very much possible for it to detect any attacks in its network by collecting all the information from different switches connected in its network in a very efficient and robust way.

Denial-of-service (DoS) attack is an attempt to make a machine or resource unavailable to its intended users. Distributed Denial of Service (DDoS) is type of DoS attack in which attackers attack the machine or resources in a distributed fashion. It means attackers used multiple machines to execute the attack against a particular machine. In this type of attack, attackers instruct a set of compromised machines called Bots to flood the intended victim with large number of request. In order to prevent such attacks network professionals use different techniques like throttling, rate limiting etc to detect abnormal traffics on a particular link or a
server. Attackers then used different other techniques like sending low intensity traffic not to the targeted machine rather than all the hosts connected with the same link with the target machine so that link will be flooded with traffic and target machine will be virtually cutoff from the network. In this type of attack, the attackers act as a bot master and use its bot army to send low intensity but constant flow of legitimate traffic on the specific link in the path to which the
server/machine is connected. In this way the link will be saturated to its maximum capacity and the target machine will be virtually disconnected from the network. This type of attacks are really difficult for victim to detect. But in SDN the controller has overall idea about the network and it can get all the network statistics from the different switch connected in its network. So it is possible for the controller to monitor traffic in its network and use machine learning techniques
to learn such patterns and diagnose such attacks in its network and prevent them by dropping such traffic for certain period of time or filtering out completely from those sources. In our work we have attacked the target host connected in the SDN by various attack techniques like DDoS attack, through flooding ARP broadcast packet to unknown host, ping packets with heavy payload by various malicious host (called bot army) to target host, UDP packets with heavy payloads to the target host with random destination port number. ARP broadcast packet to unknown host will be replicated to all the interfaces connected to that particular switch which will increase the network traffic unnecessarily.


Motivation:

Related work:
In the traditional architecture of SDN, the controller has a REST interface to talk to different applications and offer services. However, this ability offers security vulnerability which was addressed through rosemary[1]. AvantGuard [2] secures the controller from external attacks which aim at exhausting CPU of controller with TCP SYN flood attack, malicious scans by hosts in the network and network intrusion detection. However, this does not cover all attacks possible within a SDN and we can exploit the programmability to the controller to security of the SDN as a whole. In [4], there was an entropy based implementation on detecting the anomaly in the SDN and accordingly take appropriate action to mitigate such attack. In [8], there is a discussion on most recent DDOS attacks in the real world network. However, in our work we have first formulated various attacks like DDoS attack, through flooding ARP broadcast packet to unknown host, ping packets with heavy payload by various malicious host (called bot army) to target host, UDP packets with heavy payloads to the target host with random destination port number. Then we have designed a machine learning technique by learning the algorithm using the various SDN features like packet features( Packet Len, Packet Type(ARP,ICMP,LLDP etc), Packet count(per type as well as global count), TCP/UDP, sport/dport), Switch features(Adding all switch Ports combined) , Host ports(Data only) Amplification factor Out(Num of bytes out/ Num of bytes in), Amplification factor In(Num of bytes in/ Num of bytes out), Number of packets Out, Number of packets In Ports to controller(OF only): Number of OF messages sent to controller.

System Design:

Implementation:
The changes required for our project can be broadly divided into two categories- Changes at Controller, Changes at the external module.
Controller:
The controller on the flood light doesn’t get the opportunity to analyze the packets since the time a particular flow is pushed to the switch. The flow rule is matched to the IP addresses and forwarded to the hosts without any look up on the IPs. In fact the packet can have a NULL IP address(or a Spoofed one) as the source and set the destination IP as the target. The switch wouldn’t or shouldn’t bother the IP layer. However, controller have the authority to clean the flows on the switch at any time and dump the flows it needs for the purpose of detection. We need to know when a particular host/switch has started to behave badly. For this, we capture the packets on a switch per flow. A period can be set with a certain time or number of packets. We take the approach of number of packets for a flow as soon as the flow is pushed to a switch. The flow pushed is set with the action to forward each packet to the controller. The action OFPP_Controller is used for this. First 10 packets are stored for the analysis. After the first 10 packets, we will flush the particular flow F and push a fresh flow F’ with action forward to controller removed. Note that during this time, there may be some packets reaching the controller causing flow loss. These needs to be forwarded to the appropriate switch. However, this behavior is similar to the IDLEtimeout of a flow on the switch.

All the algorithms mentioned in section 2 are implemented as part of external python module. The scikit machine learning library in python is used for KMeans clustering and cross-validation schemes. The external module talks with controller on a TCP connection. The python module collects packets regularly, analyzes them and updates the trust scores back to the controller. Based on trust score, appropriate action is taken by the controller. For the effective communication process, all the information to the module is send as a json object and so is the information that is sent back to the controller. Once the algorithms are trained, it will detect a packet malign or benign. So, detection for any of the above mentioned attacks accumulates the malign packets over time. So, if we see high percentage of malign packets for consequent runs, we detect that an attack is on its way in the network.

Packet analysis:
This step involves analyzing all the packets which reach controller. Marking the packets malign/benign, we know the number of malign packets reaching the controller.
Controller to switch analysis :( Control message saturation analysis) Find the malign packet contribution from each switch since we know the identity of each switch
which sent a malign packet.
Trust Score of a switch: We have updated the trust score for a switch depending on the contribution of that switch to malign packets.
Mitigation actions: The control messages from a switch to controller are currently going through TCP connection. To limit a rogue switch (or a victim switch due to a malign host) to flood the controller , we limit the TCP receive window with respect to that switch for a random period of time.
Data plane saturation attack analysis: For each host which is essentially associated with a switchport, we propose a novel approach to assign an attackScore, victimScore to each host. We measure the Number of packets in, Amplification factor In and measure the standard deviation of both of them. As the standard deviation is more (based on the threshold we set), we detect it as an anomaly and increase the victim score appropriately. Similarly we measure Number of packets Out, Amplification factor out and measure the standard deviation. With this anomaly, we update the attackScore for a host, switchPort combination. Total trust Score of a host = (victimScore + 1/attackScore).
Mitigation actions: Existing flows: If an attackScore for a host is high, rate limiting is applied to the hosts. New flows: While adding new flows to a host, we consider the victimScore of the host as well as attackScore of the source before adding a flow.


Challenges:
Based on the detection explained above, we further decide on how controlled a flow can be. For this, there is a parameter for each flow, priority (OFFlowmod parameter). The priority of each flow will be set based on the trust score calculated. This is primary parameter that can be used. However, the flow priority is always not that direct. If a particular flow is diagnosed as malicious it can be dropped. But if the host/switch is diagnosed malicious the action can vary. For a particular host detected malicious, all the flows matching that host will be given a lesser priority. If the switch itself is not genuine it is blocked to communicate with the controller for a while and released. This is because we don’t want to consider a good switch malicious for a suspicious activity for a single period of time. The alternative approach is QOS. There are multiple ports on a switch connected to various hosts. The traffic flow can be controlled based on the bandwidth allocated for various queues. This is one of the applications of SDN where multiple queues are configured on a switch allocated with different bandwidth. Each flow can be matched to one of these queues. The advantage of queues over priority is limiting the bandwidth of a malicious flow can reduce the risk of further damage from a flow to be very slow even if it was detected partially malicious earlier. In case of priority, if none of the other flows are active, they can dropped eventually and the malicious one still gets to operate at the complete bandwidth inspiteof being at low priority. This feature is not complete on floodlight yet as mentioned in the link above. We are trying to tune this to a level required to achieve the required functionality.

Results:

Conclusions:

